datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  messages         Message[]
  appointments     Appointment[]
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  posts            Post[]
  comments         PostComment[]
  likes            PostLike[]

  artistProfile ArtistProfile?
  artistAvailability ArtistAvailability[]
}

model ArtistProfile {
  id          String   @id @default(cuid())
  bio         String?
  location    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model ArtistAvailability {
  id        String   @id @default(cuid())
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  artistId  String

  artist User @relation(fields: [artistId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Appointment {
  id          String            @id @default(cuid())
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(PENDING)
  price       Float
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  userId    String
  artistId  String
  paymentId String?

  user    User     @relation(fields: [userId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  currency  String        @default("USD")
  status    PaymentStatus @default(PENDING)
  stripeId  String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  appointments Appointment[]
}

enum Role {
  USER
  ARTIST
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model HashTag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Post {
  id       String      @id @default(cuid())
  title    String
  content  String
  author   User        @relation(fields: [authorId], references: [id])
  authorId String
  appointmentable Boolean
  appointmentPrice Float?
  appointmentDuration Int?

  images   PostImage[]
  tags     HashTag[]
  likes    PostLike[]
  comments PostComment[]
}

model PostImage {
  id     String @id @default(cuid())
  url    String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model PostComment {
  id      String @id @default(cuid())
  content String
  postId  String
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}
